# This file is NOT licensed under the GPLv3, which is the license for the rest
# of YouCompleteMe.

import os
import ycm_core

XCODE_BASE = '/Applications/Xcode.app/Contents/Developer/'
XCODE_INCLUDE = os.path.join(XCODE_BASE, 'Toolchains/XcodeDefault.xctoolchain/usr/include')
SIMULATOR_BASE = os.path.join(XCODE_BASE, 'Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk')
FRAMEWORK = os.path.join(SIMULATOR_BASE, 'System/Library/Frameworks')
INCLUDES = os.path.join(SIMULATOR_BASE, 'usr/include')

flags = [
    '-isysroot',
    SIMULATOR_BASE,
    '-I%s' % XCODE_INCLUDE,
    '-I%s' % INCLUDES,
    '-F%s' % FRAMEWORK,
    '-framework Foundation',
    '-framework UIKit',
    '-DNS_BLOCK_ASSERTIONS=1',
    '-fblocks',
    '-fobjc-nonfragile-abi',
    '-fno-builtin',
    '-m32',
    '-x',
    'objective-c',
    '-arch i386',
    '-fmessage-length=0',
    '-std=gnu99',
    '-fobjc-arc',
    '-Wno-trigraphs',
    '-fpascal-strings',
    '-Os',
    '-Wno-missing-field-initializers',
    '-Wno-missing-prototypes',
    '-Wreturn-type',
    '-Wno-implicit-atomic-properties',
    '-Wno-receiver-is-weak',
    '-Wduplicate-method-match',
    '-Wall',
    '-Wextra',
    '-Wformat',
    '-Wno-sign-compare',
    '-Wno-missing-braces',
    '-Wparentheses',
    '-Wswitch',
    '-Wno-unused-function',
    '-Wno-unused-label',
    '-Wno-unused-parameter',
    '-Wunused-variable',
    '-Wunused-value',
    '-Wempty-body',
    '-Wuninitialized',
    '-Wno-unknown-pragmas',
    '-Wno-shadow',
    '-Wno-four-char-constants',
    '-Wno-conversion',
    '-Wno-constant-conversion',
    '-Wno-int-conversion',
    '-Wno-enum-conversion',
    '-Wno-shorten-64-to-32',
    '-Wpointer-sign',
    '-Wno-newline-eof',
    '-Wno-selector',
    '-Wno-strict-selector-match',
    '-Wno-undeclared-selector',
    '-Wno-deprecated-implementations',
    '-fexceptions',
    '-fasm-blocks',
    '-fstrict-aliasing',
    '-Wprotocol',
    '-Wdeprecated-declarations',
    '-g',
    '-fvisibility=hidden',
    '-Wno-sign-conversion',
    '-fobjc-abi-version=2',
    '-fobjc-legacy-dispatch',
    '-mios-simulator-version-min=6.0',
    '-iquote',
]

compilation_database_folder = ''

if os.path.exists(compilation_database_folder):
    database = ycm_core.CompilationDatabase(compilation_database_folder)
else:
    database = None

SOURCE_EXTENSIONS = ['.cpp', '.cxx', '.cc', '.c', '.m', '.mm']

def DirectoryOfThisScript():
    return os.path.dirname(os.path.abspath(__file__))


def MakeRelativePathsInFlagsAbsolute(flags, working_directory):
    if not working_directory:
        return list(flags)
    new_flags = []
    make_next_absolute = False
    path_flags = ['-isystem', '-I', '-iquote', '--sysroot=']
    for flag in flags:
        new_flag = flag

        if make_next_absolute:
            make_next_absolute = False
            if not flag.startswith('/'):
                new_flag = os.path.join(working_directory, flag)

        for path_flag in path_flags:
            if flag == path_flag:
                make_next_absolute = True
                break

        if flag.startswith(path_flag):
            path = flag[len(path_flag):]
            new_flag = path_flag + os.path.join(working_directory, path)
            break

        if new_flag:
            new_flags.append(new_flag)
    return new_flags


def IsHeaderFile(filename):
    extension = os.path.splitext(filename)[1]
    return extension in ['.h', '.hxx', '.hpp', '.hh']


def GetCompilationInfoForFile(filename):
    # The compilation_commands.json file generated by CMake does not have entries
    # for header files. So we do our best by asking the db for flags for a
    # corresponding source file, if any. If one exists, the flags for that file
    # should be good enough.
    if IsHeaderFile(filename):
        basename = os.path.splitext(filename)[0]
        for extension in SOURCE_EXTENSIONS:
            replacement_file = basename + extension
            if os.path.exists(replacement_file):
                compilation_info = database.GetCompilationInfoForFile(replacement_file)
                if compilation_info.compiler_flags_:
                    return compilation_info
        return None
    return database.GetCompilationInfoForFile(filename)


def FlagsForFile(filename, **kwargs):
    if database:
        # Bear in mind that compilation_info.compiler_flags_ does NOT return a
        # python list, but a "list-like" StringVec object
        compilation_info = GetCompilationInfoForFile(filename)
        if not compilation_info:
            return None

        final_flags = MakeRelativePathsInFlagsAbsolute(
            compilation_info.compiler_flags_,
            compilation_info.compiler_working_dir_
        )

        # NOTE: This is just for YouCompleteMe; it's highly likely that your project
        # does NOT need to remove the stdlib flag. DO NOT USE THIS IN YOUR
        # ycm_extra_conf IF YOU'RE NOT 100% SURE YOU NEED IT.
        try:
            final_flags.remove('-stdlib=libc++')
        except ValueError:
            pass
    else:
        relative_to = DirectoryOfThisScript()
        final_flags = MakeRelativePathsInFlagsAbsolute(flags, relative_to)

    return {'flags': final_flags, 'do_cache': True}
